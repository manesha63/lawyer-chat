generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String     @id @default(cuid())
  name                     String?
  email                    String?    @unique
  emailVerified            DateTime?
  password                 String?
  image                    String?
  role                     String     @default("user")
  registrationToken        String?    @unique
  registrationTokenExpires DateTime?
  registrationIp           String?
  failedLoginAttempts      Int        @default(0)
  lockedUntil              DateTime?
  lastLoginAt              DateTime?
  lastLoginIp              String?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  accounts                 Account[]
  auditLogs                AuditLog[]
  chats                    Chat[]
  sessions                 Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String?
  title     String?
  preview   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id         String   @id @default(cuid())
  chatId     String
  role       String
  content    String
  references String[]
  createdAt  DateTime @default(now())
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  userId       String?
  email        String?
  ipAddress    String?
  userAgent    String?
  success      Boolean  @default(true)
  errorMessage String?
  metadata     Json?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@index([action, createdAt])
  @@index([email])
  @@index([userId])
}
