// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Hashed password for RJLF employees
  image         String?
  role          String    @default("user") // user, admin
  
  // Registration tracking
  registrationToken        String?   @unique
  registrationTokenExpires DateTime?
  registrationIp           String?
  
  // Security tracking
  failedLoginAttempts Int      @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat functionality models
model Chat {
  id        String    @id @default(cuid())
  userId    String?
  title     String?
  preview   String?   // First message preview
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  role        String   // "user" or "assistant"
  content     String   @db.Text
  references  String[] // Array of document references/citations
  createdAt   DateTime @default(now())
  
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// Audit logging for admin monitoring
model AuditLog {
  id          String   @id @default(cuid())
  action      String   // USER_REGISTRATION, LOGIN_SUCCESS, LOGIN_FAILED, etc.
  userId      String?
  email       String?
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  metadata    Json?    // Additional data
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([action, createdAt])
  @@index([email])
  @@index([userId])
}
